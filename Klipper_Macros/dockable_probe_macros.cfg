#ANNEX MAGNET PROBE MACROS - DOCKABLE PROBE

#Originally developed by Mental, modified for better use on K-series printers by RyanG and Trails

#########################################################
# User Settings for Annex Magnetic Microswitch Probe
#########################################################
[gcode_macro Homing_Variables]

# if the probe fails to attach or dock 
# perform emergency stop 
variable_estop_probe_failure:   True

# location of the probe when docked.
# this should typically be the coordinates
# where the probe magnets attract themselves
# too the tool and attach.
# The probe offset is automatically added to dock_z 
# in a sometimes futile attempt to prevent crashes
variable_dock_x:                1   # x actual dock location
variable_dock_y:                365 # y actual dock location
variable_dock_z:                20  # what the z will be lowered to, to prevent impact
variable_dock_x_entry:          35  # x entry location for the toolhead to dock the probe, will move in a straight line from this position
variable_dock_y_entry:          331 # y entry location for the toolhead to dock the probe, will move in a straight line from this position
variable_decouple_x:            40  # x where the toolhead moves to when decoupling the probe from the toolhead
variable_decouple_y:            366 # y where the toolhead moves to when decoupling the probe from the toolhead
variable_travel_speed:          300 # how fast all other travel moves will be performed when running these macros
variable_dock_speed:            30  # how fast the toolhead will move when docking the probe, and undocking
variable_decouple_probe_speed:	100 # how fast the toolhead will move to uncouple the probe from the toolhead
variable_z_drop_speed:			20  # how fast the z will lower when moving to the z location to clear the probe
variable_dock_x_umbilical_straightener: 15 #used to give the umbilical a better path to follow and coil properly if dock is tight spaces, set to same as dock entry to not use
variable_dock_y_umbilical_straightener: 15 #used to give the umbilical a better path to follow and coil properly if dock is tight spaces, set to same as dock entry to not use

# set the sensorless homing current reduction here (value must be 0-1, 0 = 0%, 1 = 100% available current)
variable_sensorless_homing_x: 1.0 # set for x axis
variable_sensorless_homing_y: 1.0 # set for y axis

# if a separate Z endstop switch is in
# use, specify the coordinates of the switch
# here (Voron). 
# if the Z endstop is mounted
# to the Z axis like on an i3, leave these
# values set to 0
# if the probe is to be used as the Z endstop,
# the Z axis will home off the center of the bed
# and these coordinates are ignored
variable_z_endstop_x:            0
variable_z_endstop_y:            0
   
# if G28 is called and all three axes
# are specified (G28 X0 Y0 Z0 or G28)
# then park the toolhead after homing
variable_park_toolhead:         True

# location to park the toolhead
variable_parkposition_x:        175   
variable_parkposition_y:        175      
variable_parkposition_z:        12   

# run Z axis calibrations and bed mesh
# after homing. If a Z axis calibration
# routine is specified in your config file,
# it will run following homing
# Z axis calibrations include
# z_tilt, quad_gantry_level, and bed_tilt

variable_enable_z_calibration:  False
variable_enable_mesh:           False

# if Z axis is already homed, subsequent
# commands to home the Z axis will not
# re-issue Calibration and Bed Mesh if 
# these are set to false
variable_always_mesh:           False   
variable_always_z_calibrate:    False  


# If you are using any of these calibration
# methods, you will need to uncomment one or
# more of the macros below for overrides to
# function properly

#[gcode_macro QUAD_GANTRY_LEVEL]
#rename_existing:             _QUAD_GANTRY_LEVEL
#gcode:
#    Attach_Probe
#
#    #lock probe to prevent re-attaching before homing z
#    SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_lock_probe VALUE={ True } 
#
#    _QUAD_GANTRY_LEVEL {% for p in params 
#            %}{'%s=%s' % (p, params[p])}{% 
#           endfor %}
#    G28 Z0
    
[gcode_macro BED_MESH_CALIBRATE]
rename_existing:             _BED_MESH_CALIBRATE
gcode:
    Attach_Probe
    _BED_MESH_CALIBRATE {% for p in params 
           %}{'%s=%s' % (p, params[p])}{% 
          endfor %}
    Dock_Probe

# [gcode_macro BED_TILT_CALIBRATE]
# rename_existing:             _BED_TILT_CALIBRATE
# gcode:
#    Attach_Probe
#    _BED_TILT_CALIBRATE {% for p in params 
#           %}{'%s=%s' % (p, params[p])}{% 
#          endfor %}
#    Dock_Probe

[gcode_macro Z_TILT_ADJUST]
rename_existing:             _Z_TILT_ADJUST
gcode:
   Attach_Probe

   #lock probe to prevent re-attaching before homing z
   SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_lock_probe VALUE={ True } 
    
   _Z_TILT_ADJUST {% for p in params 
          %}{'%s=%s' % (p, params[p])}{% 
         endfor %}
   G28 Z0
 

#########################################################
# Probaby not a good idea to venture below this line 
# unless you know what you are doing - here be dragons
#########################################################

#enable to SET_KINEMATIC_POSITION for Z hop
[force_move]
enable_force_move:          True


[homing_override]
axes:                             xyz
gcode:   

    #collect homing state variables
    Homing_Variables

    {% set Ht = printer["gcode_macro Homing_Variables"].travel_speed  * 60  %}
    {% set HcX = printer["gcode_macro Homing_Variables"].sensorless_homing_x|float %}
    {% set HcY = printer["gcode_macro Homing_Variables"].sensorless_homing_y|float %}
    
    #reset parameters
    {% set X, Y, Z = False, False, False %}
   
    #sniff gcode parameters for
    #which axes have been requested for homing
    {% if   not 'X' in params
        and not 'Y' in params 
        and not 'Z' in params %}
        
        {% set X, Y, Z = True, True, True %}
 
    {% else %}
        {% if 'X' in params %}
            {% set X = True %}
        {% endif %}
        {% if 'Y' in params %}
            {% set Y = True %}
        {% endif %}
        {% if 'Z' in params %}
            {% set Z = True %}
        {% endif %}      
        {% if 'X' in params
          and 'Y' in params 
          and 'Z' in params %}           
            #reset homing state variables
            #if homing all axes
            Homing_Variables reset=1            
         {% endif %}         
    {% endif %}
 
    {% if X %}
        #lower current for homing if using sensorless homing
        {% if printer['configfile'].config["stepper_x"]["endstop_pin"] == 'tmc2209_stepper_x:virtual_endstop' %}
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={(printer.configfile.config["tmc2209 stepper_x"]["run_current"]|float)*HcX} HOLDCURRENT={(printer.configfile.config["tmc2209 stepper_x"]["hold_current"]|float)*HcX}
            SET_TMC_CURRENT STEPPER=stepper_x1 CURRENT={(printer.configfile.config["tmc2209 stepper_x1"]["run_current"]|float)*HcX} HOLDCURRENT={(printer.configfile.config["tmc2209 stepper_x1"]["hold_current"]|float)*HcX}
            G28 X0
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.configfile.config["tmc2209 stepper_x"]["run_current"]|float} HOLDCURRENT={printer.configfile.config["tmc2209 stepper_x"]["hold_current"]|float}
            SET_TMC_CURRENT STEPPER=stepper_x1 CURRENT={printer.configfile.config["tmc2209 stepper_x1"]["run_current"]|float} HOLDCURRENT={printer.configfile.config["tmc2209 stepper_x1"]["hold_current"]|float}
        #else home normally
        {% else %}
            G28 X0
        {% endif %}
        #set X axis as homed
        Homing_Variables axis=X  
    {% endif %}
 
    {% if Y %}
        #lower current for homing if using sensorless homing
        {% if printer['configfile'].config["stepper_y"]["endstop_pin"] == 'tmc2209_stepper_y:virtual_endstop' %}
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={(printer.configfile.config["tmc2209 stepper_y"]["run_current"]|float)*HcY} HOLDCURRENT={(printer.configfile.config["tmc2209 stepper_y"]["hold_current"]|float)*HcY}
            SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={(printer.configfile.config["tmc2209 stepper_y1"]["run_current"]|float)*HcY} HOLDCURRENT={(printer.configfile.config["tmc2209 stepper_y1"]["hold_current"]|float)*HcY}
            G28 Y0
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer.configfile.config["tmc2209 stepper_y"]["run_current"]|float} HOLDCURRENT={printer.configfile.config["tmc2209 stepper_y"]["hold_current"]|float}
            SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={printer.configfile.config["tmc2209 stepper_y1"]["run_current"]|float} HOLDCURRENT={printer.configfile.config["tmc2209 stepper_y1"]["hold_current"]|float}
        #else home normally
        {% else %}
            G28 Y0
        {% endif %}
        #set Y axis as homed
        Homing_Variables axis=Y  
    {% endif %}
    
    {% if Z %}
        #check if there is already a G28 Z running that has not completed yet
        {% set outermost_z_home_call = not(printer["gcode_macro Homing_Variables"].z_home_running) %}
        {% if outermost_z_home_call %}
            SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_home_running VALUE={ True }
        {% endif %}

        #if probe is configured as endstop, attach it
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            Attach_Probe
        {% endif %}

        #lock probe to prevent repeated docking and re-attaching
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_lock_probe VALUE={ True } 
       
        Homing_ZHome

        #Verify probe is still attached before
        Homing_SetProbeState action=query

        #set Z axis as homed
        Homing_Variables axis=Z  

        #perform additional calibration on Z axis
        Homing_ZCalibrate

        #set Z axis as calibrated
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_calibration_state VALUE=True 

        #if this is the outermost call to G28 Z, note that there is no longer a running Z home, and dock probe if necessary
        {% if outermost_z_home_call %}
            SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_home_running VALUE={ False }
            #if probe is configured as endstop, dock it
            {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}            
                SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_lock_probe VALUE={ False } 
                Dock_Probe
            {% endif %}
        {% endif %}

    {% endif %}

    #park the toolhead
    Homing_ParkTool


#this macro stores all the homing states and resets them
[gcode_macro Homing_Variables]
variable_homing_x:                  False      
variable_homing_y:                  False      
variable_homing_z:                  False
variable_homing_calibration_state:  False 
variable_homing_error:              False 
variable_homing_lock_probe:         False
variable_z_home_running:            False 
variable_probing_speed_z:           0
variable_dock_safe_offset_x:        0
variable_dock_safe_offset_y:        0
variable_default_probe_x:           0
variable_default_probe_y:           0
variable_z_safe_x:                  0
variable_z_safe_y:                  0
variable_z_safe_z:                  0
variable_probe_attached:            False
default_parameter_axis:     
default_parameter_reset:            0
default_parameter_error:            0
gcode:

    Homing_CheckProbe action=query

    {% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    {% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
    {% set Dy = printer["gcode_macro Homing_Variables"].dock_y|float %}
    {% set Dz = printer["gcode_macro Homing_Variables"].dock_z|float %}
    {% set Hx = printer["gcode_macro Homing_Variables"].z_endstop_x|float %}
    {% set Hy = printer["gcode_macro Homing_Variables"].z_endstop_y|float %}
    {% set R  = params.RESET %}

    #get homing speed from config section
    SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=probing_speed_z VALUE={ 
        60 * printer['configfile'].config["probe"]["speed"]|float }

    {% if Hx != 0 or Hy != 0 %}
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_safe_x VALUE={ Hx }
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_safe_y VALUE={ Hy }
    {% else %}
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_safe_x VALUE={ (Mx * 0.5) - Ox }
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_safe_y VALUE={ (My * 0.5) - Oy }
    {% endif %}

    SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=default_probe_x VALUE={ (Mx * 0.5) - Ox }
    SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=default_probe_y VALUE={ (My * 0.5) - Oy }
    SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_safe_z VALUE={  Dz + Oz }

    #determine best direction to extract probe.
    #if the probe dock is somewhere on the left, move to the right.
    #if the probe dock is somewhere on the right, move to the left
    {%if Dy > My / 2.0 %}
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=dock_safe_offset_y VALUE={ Dy - 40 }
    {% else %}
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=dock_safe_offset_y VALUE={ Dy + 40 }
    {% endif %}

    #report error and reset homing state
    {% if E %}
        {% set R = true %}
        { action_respond_error("Homing Error!") } 
        M84        
    {% else %}

        #if called with an axis in the parameters, set the axis to "true" 
        #otherwise, reset homing state
        {% if 'AXIS' in params %}
            SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_{ AXIS.lower() } VALUE=True
        {% endif %}

   {% endif %}

   {% if R %}
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_x     VALUE=False
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_y     VALUE=False
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_z     VALUE=False
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_error VALUE=False
   {% endif %}


[gcode_macro Attach_Probe]
gcode:
    {% set E  = printer["gcode_macro Homing_Variables"].homing_error      %}
    {% set L  = printer["gcode_macro Homing_Variables"].homing_lock_probe %}  
    {% set Dx = printer["gcode_macro Homing_Variables"].dock_x|float      %}  
    {% set Dy = printer["gcode_macro Homing_Variables"].dock_y|float      %}
    {% set Cx = printer["gcode_macro Homing_Variables"].homing_x          %}
    {% set Cy = printer["gcode_macro Homing_Variables"].homing_y          %}    
    {% set Dz = printer["gcode_macro Homing_Variables"].z_safe_z|float    %}
    {% set Sd = printer["gcode_macro Homing_Variables"].dock_speed * 60   %}
    {% set Sp = printer["gcode_macro Homing_Variables"].probing_speed_z   %}
	{% set Sz = printer["gcode_macro Homing_Variables"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro Homing_Variables"].travel_speed * 60 %}

    {% if not (Cy and Cx) %}
        { action_raise_error("Must Home X and Y Axis First!") }

    #bypass if probe is already attached and no error state
    {% elif not E and not L %}

        { action_respond_info("Attaching Probe") }
        G90

        #if Z appears to be too low to extract the probe, raise it up
        {% if not 'z' in printer.toolhead.homed_axes %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}  

        {% if printer.toolhead.position.z < Dz %}
            G1 Z{Dz} F{Sz}
        {% endif %}    

        #run Do_Attach Macro (below:)
        Do_Attach

        #check to see if probe is attached
        Homing_CheckProbe action=attach 

    {% endif %} 

[gcode_macro Do_Attach]
gcode:
        {% set Dx = printer["gcode_macro Homing_Variables"].dock_x|float %}
        {% set Dy = printer["gcode_macro Homing_Variables"].dock_y|float %}
        {% set Dxe  = printer["gcode_macro Homing_Variables"].dock_x_entry|float %}
        {% set Dye  = printer["gcode_macro Homing_Variables"].dock_y_entry|float %}
        {% set Dxu  = printer["gcode_macro Homing_Variables"].dock_x_umbilical_straightener|float %}
        {% set Dyu  = printer["gcode_macro Homing_Variables"].dock_y_umbilical_straightener|float %}
        {% set St = printer["gcode_macro Homing_Variables"].travel_speed * 60 %}
        {% set Sd = printer["gcode_macro Homing_Variables"].dock_speed * 60 %}
        {% set Sp = printer["gcode_macro Homing_Variables"].probing_speed_z %}
        {% set Dz = printer["gcode_macro Homing_Variables"].z_safe_z|float %}
        {% set Px = printer["gcode_macro Homing_Variables"].default_probe_x %}
        {% set Py = printer["gcode_macro Homing_Variables"].default_probe_y %}
	    {% set Sz = printer["gcode_macro Homing_Variables"].z_drop_speed * 60 %}

        #Save Gcode state incase there is a Z offset configured and the dock is mounted on the bed
        M400 # mandatory to save the new safe position
        #allows the docking position to be independent of the Z offset, necessary for bed mounted probes
        SAVE_GCODE_STATE name=_doAttach
        SET_GCODE_OFFSET Z=0
	
        #extract from dock
        G1 X{Dxu} Y{Dyu} F{St}
        G1 X{Dxe} Y{Dye} F{St}
        G1 X{Dx} Y{Dy}  F{Sd}
        G1 X{Dxe} Y{Dye} F{St}
        G1 Z{Dz} F{Sz}
        G1 X{Px} Y{Py} F{St} 

        #reverts to the original Gcode stare
        RESTORE_GCODE_STATE name=_doAttach

[gcode_macro Dock_Probe]
gcode:
    {% set Sd = printer["gcode_macro Homing_Variables"].dock_speed * 60 %}
    {% set St = printer["gcode_macro Homing_Variables"].travel_speed  * 60  %}
    {% set Sp = printer["gcode_macro Homing_Variables"].probing_speed_z  * 60 %}
    {% set Dx  = printer["gcode_macro Homing_Variables"].dock_x|float %}
    {% set Dy  = printer["gcode_macro Homing_Variables"].dock_y|float %}
    {% set Dxe  = printer["gcode_macro Homing_Variables"].dock_x_entry|float %}
    {% set Dye  = printer["gcode_macro Homing_Variables"].dock_y_entry|float %}
    {% set Dxu  = printer["gcode_macro Homing_Variables"].dock_x_umbilical_straightener|float %}
    {% set Dyu  = printer["gcode_macro Homing_Variables"].dock_y_umbilical_straightener|float %}
    {% set Dxd  = printer["gcode_macro Homing_Variables"].decouple_x|float %}
    {% set Dyd  = printer["gcode_macro Homing_Variables"].decouple_y|float %}
    {% set Dsx = printer["gcode_macro Homing_Variables"].dock_safe_offset_x %}
    {% set Dsy = printer["gcode_macro Homing_Variables"].dock_safe_offset_y %}
    {% set Dz  = printer["gcode_macro Homing_Variables"].z_safe_z|float %}
    {% set E   = printer["gcode_macro Homing_Variables"].homing_error %}
    {% set L   = printer["gcode_macro Homing_Variables"].homing_lock_probe %}
    {% set Sus = printer["gcode_macro Homing_Variables"].decouple_probe_speed * 60 %}
	{% set Sz = printer["gcode_macro Homing_Variables"].z_drop_speed * 60 %}
    
    #bypass if probe needs to stay attached and no error state
    {% if not E and not L %}

        { action_respond_info("Docking Probe") }
        G90

        #if Z appears to be too low to extract the probe, raise it up
        {% if printer.toolhead.position.z < Dz %}
            G1 Z{Dz} F{Sz}
        {% endif %}  
        
	#Save Gcode state incase there is a Z offset configured and the dock is mounted on the bed
        M400 # mandatory to save the new safe position
        #allows the docking position to be independent of the Z offset, necessary for bed mounted probes
        SAVE_GCODE_STATE name=_dockProbe
        SET_GCODE_OFFSET Z=0
	
        #insert into dock
        G1 X{Dxu} Y{Dyu} F{St}
        G1 X{Dxe} Y{Dye} F{St}
        G1 X{Dx} Y{Dy} F{Sd}
        G1 X{Dxd} Y{Dyd} F{Sus}
        G1 X{Dxe} Y{Dye} F{St}

        #check to see if probe docked
        Homing_CheckProbe action=dock 

        #reverts to the original Gcode stare
        RESTORE_GCODE_STATE name=_dockProbe

    {% endif %} 

#check to see if probe is where it is supposed to be after
#attaching/docking maneuver and set homing error or shutdown
[gcode_macro Homing_CheckProbe]
variable_probe_state:           0
default_parameter_action:       
gcode:
    Query_Probe
    Homing_SetProbeState action={ ACTION }

#due to how templates are evaluated, we have query endstops in one
#macro and call another macro to make decisions based on the result
[gcode_macro Homing_SetProbeState]
default_parameter_action:        
gcode:
    {% set P = not printer.probe.last_query %}
    {% set E = printer["gcode_macro Homing_Variables"].estop_probe_failure %}
    SET_GCODE_VARIABLE MACRO=Homing_CheckProbe VARIABLE=probe_state VALUE={ P }

    {% if params.ACTION == 'query' %}
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=probe_attached VALUE={ not P}    
    {% endif %}

    #if probe fails to attach/detach
    {% if (P and params.ACTION == 'dock') %}
        {% if E %}
            { action_emergency_stop("Probe dock failed!") }
        {% else %}
            { action_raise_error("Probe dock failed!") }
            SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_error VALUE=True
        {% endif %}
    {% endif %}

    {% if not P and params.ACTION == 'attach' %}

        {% if E %}
            { action_emergency_stop("Probe attach failed!") }
        {% else %}
            { action_raise_error("Probe attach failed!") }
            SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_error VALUE=True
        {% endif %}
    {% endif %}
    

[gcode_macro Homing_ZHome]
gcode:
    {% set E  = printer["gcode_macro Homing_Variables"].homing_error         %}
    {% set Hx = printer["gcode_macro Homing_Variables"].z_safe_x             %}
    {% set Hy = printer["gcode_macro Homing_Variables"].z_safe_y             %}
    {% set Cx = printer["gcode_macro Homing_Variables"].homing_x             %}
    {% set Cy = printer["gcode_macro Homing_Variables"].homing_y             %}
    {% set St = printer["gcode_macro Homing_Variables"].travel_speed * 60    %}
    {% set Sp = printer["gcode_macro Homing_Variables"].probing_speed_z * 60 %}
    {% set Dz = printer["gcode_macro Homing_Variables"].z_safe_z|float       %}
	{% set Sz = printer["gcode_macro Homing_Variables"].z_drop_speed * 60 %}

    {% if not E %}
        #if X and Y are not homed raise error
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' 
           and not (Cx and Cy) %}
            
            { action_raise_error("X and Y not homed!") }   
            SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_error VALUE=True    
        
        {% else %}              
    
            #move tool to safe homing position and home Z axis
            G1 X{Hx} Y{Hy} F{St}
            G28 Z0
            G1 Z{Dz} F{Sz}
        
        {% endif %}          
    {% endif %}

[gcode_macro Homing_ZCalibrate]
gcode:

    {% set E  = printer["gcode_macro Homing_Variables"].homing_error %}
    {% set S  = printer["gcode_macro Homing_Variables"].homing_calibration_state %}
    {% set C  = printer["gcode_macro Homing_Variables"].enable_z_calibration %}
    {% set M  = printer["gcode_macro Homing_Variables"].enable_mesh %}
    {% set Ca = printer["gcode_macro Homing_Variables"].always_z_calibrate %}
    {% set Ma = printer["gcode_macro Homing_Variables"].always_mesh %}
    {% set P  = printer["gcode_macro Homing_Variables"].probe_attached %}

    Attach_Probe

    {% if not S or Ca %}
        {% if C %}

            {% if 'z_tilt' in printer['configfile'].config %}
                _Z_TILT_ADJUST
            {% endif %}

            {% if 'quad_gantry_level' in printer['configfile'].config %}
                _QUAD_GANTRY_LEVEL
            {% endif %}

            {% if 'bed_tilt' in printer['configfile'].config %}
                _BED_TILT_CALIBRATE
            {% endif %}   

            #home Z axis again
            Homing_ZHome

        {% endif %}
    {% endif %}

    {% if not S or Ma%}
        {% if M %}
            _BED_MESH_CALIBRATE

            #home Z axis again
            Homing_ZHome
        {% endif %}
    {% endif %}

    Dock_Probe

[gcode_macro PROBE_CALIBRATE]
rename_existing:             _PROBE_CALIBRATE
gcode:
	Attach_Probe
    { action_respond_info("Please manually detach probe before calibrating") }   
    _PROBE_CALIBRATE {% for p in params 
            %}{'%s=%s' % (p, params[p])}{% 
           endfor %}
	SAVE_GCODE_STATE NAME=original_nozzle_location	#store current nozzle location
    Dock_Probe
    RESTORE_GCODE_STATE NAME=original_nozzle_location MOVE=1	#restore current nozzle location

[gcode_macro PROBE_ACCURACY]
rename_existing:             _PROBE_ACCURACY
gcode:
	SAVE_GCODE_STATE NAME=original_nozzle_location	#store current nozzle location
    Attach_Probe
    _PROBE_ACCURACY {% for p in params 
            %}{'%s=%s' % (p, params[p])}{% 
           endfor %}
    Dock_Probe
    RESTORE_GCODE_STATE NAME=original_nozzle_location MOVE=1	#restore current nozzle location

#override M84 to reset homing state if motors are disabled.
[gcode_macro M84]
rename_existing:             M84.1
gcode:
    Homing_Variables reset=1
    M84.1
   
#override M18 to reset homing state if motors are disabled.
[gcode_macro M18]
rename_existing:             M18.1
gcode:
    Homing_Variables reset=1
    M18.1


[gcode_macro Homing_ParkTool]
gcode:
    {% set P  = printer["gcode_macro Homing_Variables"].park_toolhead      %}
    {% set X  = printer["gcode_macro Homing_Variables"].homing_x           %}
    {% set Y  = printer["gcode_macro Homing_Variables"].homing_y           %}
    {% set Z  = printer["gcode_macro Homing_Variables"].homing_z           %}
    {% set pX = printer["gcode_macro Homing_Variables"].parkposition_x     %}
    {% set pY = printer["gcode_macro Homing_Variables"].parkposition_y     %}
    {% set pZ = printer["gcode_macro Homing_Variables"].parkposition_z     %}
    {% set St = printer["gcode_macro Homing_Variables"].travel_speed * 60  %}
    {% set E  = printer["gcode_macro Homing_Variables"].homing_error       %}

    G90
    {% if not E and X and Y and Z and P %}       
        { action_respond_info("Parking Tool") }
        G1 X{pX} Y{pY} Z{pZ} F{St}
    {% endif %}
